{
  "hash": "6b7aaf350e11330cd2d048d29b686248",
  "result": {
    "markdown": "# Visualisation de donn√©es avec ggplot2\n\n`ggplot2` est un package populaire de visualisation de donn√©es. Il se base sur la grammaire des graphiques et offre des fonctionnalit√©s puissantes pour cr√©er des graphiques professionnels et personnalis√©s.\n\nDans ce chapitre, nous examinerons les principales fonctions de `ggplot2` et comment elles peuvent √™tre appliqu√©es pour cr√©er diff√©rents types de graphiques, tels que les diagrammes en barres, les histogrammes, les diagrammes de dispersion et bien d'autres. Nous expliquerons √©galement comment ajuster l'apparence de vos graphiques pour les adapter aux besoins de votre projet.\n\nFaisant partie du package `tidyverse`, `ggplot2` peut √™tre charg√© automatiquement avec la commande suivante :\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidyverse)\n```\n:::\n\n\n\nOu explicitement avec la commande suivante :\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(ggplot2)\n```\n:::\n\n\n\nNous recommandons la premi√®re possibilit√© car nous aurons √† utiliser un op√©rateur `%>%`, le pipe qui permet d'encha√Æner des commandes.\n\nLes donn√©es qui seront utilis√©es ici sont tir√©√©es du recensement de la population de 2018 contenues dans le package `questionr`(r√©sultats partiels concernant les communes de plus de 2000 habitants de France m√©tropolitaine).\n\nDans ce qui suit, nous limitons l'analyse √† 4 d√©partements √† l'aide de la fonction `filter()` du package `dplyr`.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(questionr)\ndata(rp2018)\n\nrp <- filter(\n  rp2018,\n  departement %in% c(\"Oise\", \"Rh√¥ne\", \"Hauts-de-Seine\", \"Bouches-du-Rh√¥ne\")\n)\n```\n:::\n\n\n\n## Structrure d'un graphique `ggplot2`\n\nLes graphiques `ggplot2` sont construits en superposant diff√©rentes couches (layers) les unes apr√®s les autres.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(data = DATASET) + \n\tgeom_PLOT_TYPE(mapping = aes(VARIABLE)) \n```\n:::\n\n\n\nOn commence par identifier le jeu de donn√©es √† utiliser dans la fonction `ggplot()`. Ensuite le type de graphique √† r√©aliser est ajout√© avec `geom_*` et les variables √† repr√©senter. D'autres couches, par exemple les titres des axes, le th√®me et autres. Notez que l'ajout des couches se fait √† l'aide du l'op√©rateur `+`.\n\nOn peut par exemple tracer un diagramme √† barres √† l'aide de la commande suivante :\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(data = rp) + \n  geom_bar(aes(x = departement))\n```\n\n::: {.cell-output-display}\n![](visualisation-ggplot2_files/figure-pdf/unnamed-chunk-5-1.pdf){fig-pos='H'}\n:::\n:::\n\n\n\nNotez bien que la variable est fournie √† l'int√©rieur de `aes()` ou `aesthetic`.\n\n## Types de geom\n\n`ggplot` dispose d'un grand nombre de `geom` permettant de tracer une vari√©t√© de graphiques. Ci-d√©ssous, nous allons voir quelques `geom` les plus utilis√©s.\n\n### geom_histogram\n\n`geom_histogram()` permet de repr√©senter une variable quantitative continue. On lui fournit la variable que l'on souhaite repr√©sente en `x`. Le rendu du graphique correspond aux barres contigu√Øes. La hauteur de chaque barre est fonction du nombre d'observations se trouvant dans un intervalle donn√©.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(rp) + \n  geom_histogram(aes(x = cadres))\n```\n\n::: {.cell-output .cell-output-stderr}\n```\n`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.\n```\n:::\n\n::: {.cell-output-display}\n![](visualisation-ggplot2_files/figure-pdf/unnamed-chunk-6-1.pdf){fig-pos='H'}\n:::\n:::\n\n\n\nOn peut ajouter `bins` pour contr√¥ler le nombre d'intervalles ou `binwidth` pour la longueur de chaque intervalle. L'argument `fill` permet de modifier la couleur.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(rp) + \n  geom_histogram(aes(x = cadres), bins = 15, fill = \"cornflowerblue\")\n```\n\n::: {.cell-output-display}\n![](visualisation-ggplot2_files/figure-pdf/unnamed-chunk-7-1.pdf){fig-pos='H'}\n:::\n:::\n\n\n\n`geom_freqpoly()` fonctionne de la m√™me mani√®re que `geom_histogram()`, sauf qu'au lieu des barres, il trace des lignes. Il est tr√®s utilie pour comparer diff√©rents groupes.\n\nüëâ Q: Tracer un histogramme avec la variable `ouvr`\n\n### geom_density\n\nLe graphique de densit√© (aussi connu sous le nom de diagramme de densit√© de probabilit√©) est un type de graphique qui affiche la distribution des donn√©es continues. Il est utilis√© pour visualiser la forme d'une distribution de donn√©es.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(rp) + \n  geom_density(aes(x = cadres))\n```\n\n::: {.cell-output-display}\n![](visualisation-ggplot2_files/figure-pdf/unnamed-chunk-8-1.pdf){fig-pos='H'}\n:::\n:::\n\n\n\n### geom_boxplot\n\nPermet de repr√©senter des bo√Ætes √† moustaches. Avec une variable quantitative, ce graphique aide √† √©tudier la distribution de la variable avec 5 indicateurs (minimum, premier quartile, m√©diane, troisi√®me quartile et le maximum), permettant ainsi la d√©tection des valeurs aberrantes (outliers).\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(rp) + \n  geom_boxplot(aes(x = cadres)) \n```\n\n::: {.cell-output-display}\n![](visualisation-ggplot2_files/figure-pdf/unnamed-chunk-9-1.pdf){fig-pos='H'}\n:::\n:::\n\n\n\nUtilis√© avec une variable qualitative (en `x`) et quantitative (en `y`), le boxplot permet de comparer plusieurs distributions.\n\nNous pouvons ajouter les arguments `fill` et `color` pour modifier la couleur des bo√Ætes et celle des bordures.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(rp) + \n  geom_boxplot(aes(x = region, y = cadres), fill = \"wheat\", color = \"darkred\") +\n  coord_flip()\n```\n\n::: {.cell-output-display}\n![](visualisation-ggplot2_files/figure-pdf/unnamed-chunk-10-1.pdf){fig-pos='H'}\n:::\n:::\n\n\n\nLa fonction `coord_flip()` a √©t√© ajout√©e pour pivoter le graphique.\n\nL'argument `varwidth` permet de faire varier la largeur des bo√Ætes en fonction des effectifs de chaque cat√©gorie.\n\nüëâ Q: Ajouter l'argument `varwidth = TRUE` et observer la diff√©rence avec le graphique pr√©c√©dent.\n\n\n\n\n\n\n\n### geom_bar/geom_col\n\n`geom_bar()` permet de tracer un diagramme en barres. Il prend comme argument la variable cat√©gorielle dont on souhaite connaitre la fr√©quence de chaque modalit√©.\n\nLa commande suivante permet de tracer un diagramme en barres pour connaitre le nombre de communes dans chaque region.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(rp) +\n  geom_bar(aes(x = region))\n```\n\n::: {.cell-output-display}\n![](visualisation-ggplot2_files/figure-pdf/unnamed-chunk-12-1.pdf){fig-pos='H'}\n:::\n:::\n\n\n\n`geom_col()` quant √† lui demande deux arguments : la variable cat√©gorielle et les effectifs ou pourcentages correspondants.\n\nIl est possible de contr√¥le la largeur des barres avec `width`.\n\nL'exemple ci-apr√®s montre comment produire le m√™me graphique que pr√©c√©dent mais avec `geom_col()`.\n\nOne calcule d'abord des proportions et on produit le graphique ensuite. `geom_col()`\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nplt1 <- rp %>% \n  group_by(region) %>% \n  summarise(n = n()) %>% \n  mutate(pct = round(n / sum(n), 2))\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nplt1 %>% \n  ggplot() + \n  geom_col(aes(x = region, y = pct)) \n```\n\n::: {.cell-output-display}\n![](visualisation-ggplot2_files/figure-pdf/unnamed-chunk-14-1.pdf){fig-pos='H'}\n:::\n:::\n\n\n\n### geom_point\n\n`geom_point()` permet de tracer un nuage de points ou diagramme de dispersion. Il prend comme arguments en `x` et `y` les variables dont on veut √©tudier la relation.\n\nLe graphique nous montre sur un nuage de points les pourcentages des cadres et ceux des dipl√¥m√©s du sup√©rieur.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(rp) + \n  geom_point(aes(x = dipl_sup, y = ouvr))\n```\n\n::: {.cell-output-display}\n![](visualisation-ggplot2_files/figure-pdf/unnamed-chunk-15-1.pdf){fig-pos='H'}\n:::\n:::\n\n\n\nLa taille des points peut √™tre g√©r√©e avec l'argument `size`, la couleur avec `color`, et la transparence avec `alpha` dont la valeur varie de 0 √† 1. Remarquez que ces arguments sont pass√©s √† l'ext√©rieur de la fonction `aes()` comme suit :\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(rp) + \n  geom_point(aes(x = dipl_sup, y = ouvr), size = 3, color = \"darkgreen\", alpha = 0.5)\n```\n\n::: {.cell-output-display}\n![](visualisation-ggplot2_files/figure-pdf/unnamed-chunk-16-1.pdf){fig-pos='H'}\n:::\n:::\n\n\n\nüëâ Q: Remplacer `ouvr` par `cadres` et comparer la forme de des deux graphiques\n\n### geom_text\n\n`geom_text()` permet d'afficher des √©tiquettes de texte. On lui fournit, dans `aes()` deux variables quantitatives (`x` et `y`) pour d√©finir la position des √©tiquettes et `label` pour la variable qui contient les √©tiquettes √† afficher.\n\nNous repr√©nons le graphique pr√©c√©dent en rempla√ßant les poits pour les noms de communes.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(rp) + \n  geom_text(aes(x = dipl_sup, y = ouvr, label = commune))\n```\n\n::: {.cell-output-display}\n![](visualisation-ggplot2_files/figure-pdf/unnamed-chunk-17-1.pdf){fig-pos='H'}\n:::\n:::\n\n\n\n`geom_label()` est similaire √† `geom_text()`, mais avec un rendu un peu diff√©rent.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(rp) + \n  geom_label(aes(x = dipl_sup, y = ouvr, label = commune))\n```\n:::\n\n\n\n### geom_line\n\n`geom_line()` permet de tracer des lignes r√©liant diff√©rentes observations entre elles. On lui fournit en `x` la variable du temps et en `y` la variable dont on veut voir l'√©volution. Ce graphique est souvent utilis√© pour repr√©senter des s√©ries temporelles.\n\nOn va utiliser les donn√©es contenues dans le package `ggplot2` pour repr√©senter l'√©volution du taux d'√©pargne personnel (`psavert`) aux Etats-Unis dans le temps (`date`).\n\nLes fonctions `ggtitle()`, `xlab()` et `ylab()` permettent respectivement de modifier le titre du graphique, le titre de l'axe des `x` et celui de l'axe des `y`. Une autre mani√®re plus simple est d'utiliser la fonctions `labs()` avec comme arguments `title`, `x` et `y`.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndata(\"economics\")\nhead(economics)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 6 x 6\n  date         pce    pop psavert uempmed unemploy\n  <date>     <dbl>  <dbl>   <dbl>   <dbl>    <dbl>\n1 1967-07-01  507. 198712    12.6     4.5     2944\n2 1967-08-01  510. 198911    12.6     4.7     2945\n3 1967-09-01  516. 199113    11.9     4.6     2958\n4 1967-10-01  512. 199311    12.9     4.9     3143\n5 1967-11-01  517. 199498    12.8     4.7     3066\n6 1967-12-01  525. 199657    11.8     4.8     3018\n```\n:::\n\n```{.r .cell-code}\nggplot(economics) + \n  geom_line(aes(x = date, y = psavert)) + \n  ggtitle(\"Evolution du taux d'√©pargne personnel aux \\nEtats-Unis de 1967 √† 2015\") + \n  xlab(\"Ann√©e\") + \n  ylab(\"Taux d'√©pargne personnel\")\n```\n\n::: {.cell-output-display}\n![](visualisation-ggplot2_files/figure-pdf/unnamed-chunk-19-1.pdf){fig-pos='H'}\n:::\n:::\n\n\n\n## Visualiser les corr√©lations\n\n## Mappages\n\nDans le jargon de `ggplot2`, un mappage consiste √† mettre en relation un attribut graphique du `geom` (couleur, position, taille, etc) avec une variable. Les arguments du mappages doivent √™tre pass√©s √† l'int√©rieur de `aes()`.\n\n### Exemple\n\nQuand vous avez utilis√© la commande suivante,\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(rp) + \n  geom_point(aes(x = dipl_sup, y = ouvr))\n```\n\n::: {.cell-output-display}\n![](visualisation-ggplot2_files/figure-pdf/unnamed-chunk-20-1.pdf){fig-pos='H'}\n:::\n:::\n\n\n\nvous avez indiqu√© √† `ggplot2` de faire varier la position de chaque point en fonction des valeurs de `x` et `y`. Au d√©l√† de √ßa, vous pouvez faire varier la couleur des points en fonction par exemple des d√©partements comme suit :\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(rp) + \n  geom_point(aes(x = dipl_sup, y = ouvr, color = departement))\n```\n\n::: {.cell-output-display}\n![](visualisation-ggplot2_files/figure-pdf/unnamed-chunk-21-1.pdf){fig-pos='H'}\n:::\n:::\n\n\n\nVous pouvez aussi ajouter une autre variable pour faire varier les points en fonctions du taux de ch√¥mage.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(rp) + \n  geom_point(aes(x = dipl_sup, y = ouvr, color = departement, size = chom), alpha = 0.5)\n```\n\n::: {.cell-output-display}\n![](visualisation-ggplot2_files/figure-pdf/unnamed-chunk-22-1.pdf){fig-pos='H'}\n:::\n:::\n\n\n\n### A l'int√©rieur de `aes()`ou non ?\n\nLorsque nous voulons modifier un attribut du graphique, par exemple la taille des points pour un diagramme de dispersion, sans relier cette variation avec une variable, nous pr√©cisons cela en l'ext√©rieur de `aes()`.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(rp) +\n  geom_point(aes(x = dipl_sup, y = cadres), size = 3)\n```\n\n::: {.cell-output-display}\n![](visualisation-ggplot2_files/figure-pdf/unnamed-chunk-23-1.pdf){fig-pos='H'}\n:::\n:::\n\n\n\nMais lorsque nous souhaitons faire varier la taille de diff√©rens points en fonction des valeurs d'une autre variable, la nous pr√©cisons l'argument √† l'int√©rieur de la fonction `aes()` et pr√©cisons le nom de la variable concern√©e comme suit :\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(rp) +\n  geom_point(aes(x = dipl_sup, y = cadres, size = pop_tot))\n```\n\n::: {.cell-output-display}\n![](visualisation-ggplot2_files/figure-pdf/unnamed-chunk-24-1.pdf){fig-pos='H'}\n:::\n:::\n\n\n\nVous pouvez par exemple faire varier les couleurs des barres comme suit :\n\n`show.legend = F` permet de ne pas afficher la legende qui est sans importance ici.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(data = rp) + \n  geom_bar(aes(x = departement, fill = departement), show.legend = F) \n```\n\n::: {.cell-output-display}\n![](visualisation-ggplot2_files/figure-pdf/unnamed-chunk-25-1.pdf){fig-pos='H'}\n:::\n:::\n\n\n\n### Mappage avec geom_bar\n\nPour r√©aliser le mappage avec `geom_bar()`, nous allons utiliser l'argument `fill` avec une variable qualitative. Cela permet de tracer des barres de couleur diff√©rentes selon les modalit√©s d'une deuxi√®me variable :\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(rp) +\n  geom_bar(aes(x = region, fill = pop_cl))\n```\n\n::: {.cell-output-display}\n![](visualisation-ggplot2_files/figure-pdf/unnamed-chunk-26-1.pdf){fig-pos='H'}\n:::\n:::\n\n\n\nLa position des barres peut √™tre g√©r√©e avec l'argument `position` au sein de `geom_bar()`. `position` peut avoir comme valeurs :\n\n-   \"stack\" : option par d√©faut, permet d'avoir des barres emplil√©es,\n\n-   \"dodge\" : permet d'avoir des barres c√¥te √† c√¥te,\n\n-   \"fill\" : permet d'avoir des proportions au lieu des effectifs.\n\nLe graphique suiant donne des barres c√¥te √† c√¥te\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(rp) +\n  geom_bar(aes(x = region, fill = pop_cl), position = \"dodge\")\n```\n\n::: {.cell-output-display}\n![](visualisation-ggplot2_files/figure-pdf/unnamed-chunk-27-1.pdf){fig-pos='H'}\n:::\n:::\n\n\n\nAvec `fill` comme valeur, nous obtenons des proportions\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(rp) +\n  geom_bar(aes(x = region, fill = pop_cl), position = \"fill\")\n```\n\n::: {.cell-output-display}\n![](visualisation-ggplot2_files/figure-pdf/unnamed-chunk-28-1.pdf){fig-pos='H'}\n:::\n:::\n\n\n\n## Plusieurs sources de donn√©es\n\nIl est possible d'utiliser diff√©rentes sources de donn√©es sur diff√©rents geoms. Le code suivant permet de tracer un nuage de points avec les noms de communes de plus de 80000 habitants. La solution consiste √† d'abord cr√©er une base ne contenant que ces communes gr√¢ce √† la fonction `filter()`. Ensuite, on trace le nuage des points pour le tableau de donn√©es de d√©part, pour enfin ajouter les libell√©s avec `geom_text()` en pr√©cisant le tableau de donn√©es filtr√©es.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncom80 <- filter(rp, pop_tot > 80000)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(data = rp, aes(x = dipl_sup, y = cadres)) +\ngeom_point(alpha = 0.2) +\ngeom_text(\ndata = com80, aes(label = commune),\ncolor = \"red\", size = 3\n)\n```\n\n::: {.cell-output-display}\n![](visualisation-ggplot2_files/figure-pdf/unnamed-chunk-30-1.pdf){fig-pos='H'}\n:::\n:::\n\n\n\n## Faceting\n\nPermet de tracer un m√™me graphique plusieurs fois en fonctions d'une ou plusieurs variables qualitatives. Nous avons pour cela deux fonctions :\n\n-   `facet_wrap()` : dispose les graphique automatiquement\n\n-   `facet_grid()` : dispose les graphique en ligne (`rows`) ou en colonne (`cols`)\n\nConsid√©rons le nuage des points pr√©c√©dent.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(data = rp, aes(x = dipl_sup, y = cadres)) +\n  geom_point(alpha = 0.2)\n```\n\n::: {.cell-output-display}\n![](visualisation-ggplot2_files/figure-pdf/unnamed-chunk-31-1.pdf){fig-pos='H'}\n:::\n:::\n\n\n\nSi nous voulons comparer ce graphique entre les diff√©rentes regions, nous pouvons utiliser ces deux fonctions comme suit :\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(data = rp, aes(x = dipl_sup, y = cadres)) +\n  geom_point(alpha = 0.2) + \n  facet_grid(cols = vars(region))\n```\n\n::: {.cell-output-display}\n![](visualisation-ggplot2_files/figure-pdf/unnamed-chunk-32-1.pdf){fig-pos='H'}\n:::\n:::\n\n\n\nL'argument scale peut √™tre ajout√© pour lib√©rer l'axe des x (`\"free_x\"`), l'axe des y (`\"free_y\"`) ou les deux (`\"free\"`).\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(data = rp, aes(x = dipl_sup, y = cadres)) +\n  geom_point(alpha = 0.2) + \n  facet_wrap(vars(region), scales = \"free\")\n```\n\n::: {.cell-output-display}\n![](visualisation-ggplot2_files/figure-pdf/unnamed-chunk-33-1.pdf){fig-pos='H'}\n:::\n:::\n\n\n\nüëâ Q: Ajouter la variable `pop_cl` dans la fonction `facet_grid()` pr√©c√©dente comme suit `cols = vars(region), rows = vars(pop_cl)`.\n\n\n\n\n\n\n\n## Scales\n\nIl est possible de d√©finir des mappages entre des attributs graphiques (tels que la position, la taille, la couleur, etc.) et des variables d'un tableau de donn√©es avec `ggplot2.` Les fonctions `aes()` sont utilis√©es pour chaque geom afin de d√©finir ces mappages. Dans `ggplot2`, les scales permettent de modifier la mani√®re dont un attribut graphique est li√© aux valeurs d'une variable et comment la l√©gende correspondante est affich√©e. Par exemple, la palette de couleurs utilis√©e peut √™tre d√©finie pour l'attribut `color` et les tailles minimales et maximales peuvent √™tre d√©finies pour `size`.\n\nPour modifier une scale existante, on utilise l'op√©rateur + et on ajoute un nouvel √©l√©ment √† l'objet ggplot2 qui prend la forme `scale_<attribut>_<type>`.\n\n### scale_size\n\nLorsque nous effectuons un mappage de type `size`, nous pouvons modifier les tailles minimales et maximales des objets en utilisant la fonction `scale_size`. L'argument `range` est utilis√© pour cela.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(rp) +\ngeom_point(aes(x = dipl_sup, y = cadres, size = pop_tot), alpha = 0.6) +\nscale_size(\"Population\", range = c(0, 20))\n```\n\n::: {.cell-output-display}\n![](visualisation-ggplot2_files/figure-pdf/unnamed-chunk-35-1.pdf){fig-pos='H'}\n:::\n:::\n\n\n\nPour tous les scales, le premier argument est toujours le titre.\n\nD'autres arguments peut √™tre ajout√©s comme suit :\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(rp) +\n  geom_point(aes(x = dipl_sup, y = cadres, size = pop_tot)) +\n  scale_size(\n    \"Population\",\n    range = c(0, 15),\n    breaks = c(1000, 5000, 10000, 50000),\n    labels = c(\"<1000\", \"1000-5000\", \"5000-9999\", \"10000-50000\")\n)\n```\n\n::: {.cell-output-display}\n![](visualisation-ggplot2_files/figure-pdf/unnamed-chunk-36-1.pdf){fig-pos='H'}\n:::\n:::\n\n\n\n### Les scales des axes (scale_x, scale_y)\n\nPour modifier les axes du graphique, nous allons utiliser les scales `scale_x_<type>` et `scale_y_<type>` o√π `<type>` sera remplac√© par `discrete` ou `continuous` si la variable est respectivement qualitative ou quantitative.\n\n-   `scale_x_discrete` et `scale_y_discrete`\n\nAvec un diagramme en barres par exemple, nous pouvons exclure certaines modalit√© du graphique ou modifier le titre d'un axe.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(rp) +\n  geom_bar(aes(x = region))\n```\n\n::: {.cell-output-display}\n![](visualisation-ggplot2_files/figure-pdf/unnamed-chunk-37-1.pdf){fig-pos='H'}\n:::\n:::\n\n\n\nEnlevons par exemple la region de l'√Æle de France.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(rp) +\n  geom_bar(aes(x = region)) + \n  scale_x_discrete(\"Region\", limits = c(\"Provence-Alpes-C√¥te d'Azur\", \"Hauts-de-France\", \"Auvergne-Rh√¥ne-Alpes\"))\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning: Removed 35 rows containing non-finite values (stat_count).\n```\n:::\n\n::: {.cell-output-display}\n![](visualisation-ggplot2_files/figure-pdf/unnamed-chunk-38-1.pdf){fig-pos='H'}\n:::\n:::\n\n\n\n-   `scale_x_continuous` et `scale_y_continuous`\n\nPartant de ce graphique,\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(rp) + \n  geom_point(aes(x = dipl_sup, y = ouvr)) \n```\n\n::: {.cell-output-display}\n![](visualisation-ggplot2_files/figure-pdf/unnamed-chunk-39-1.pdf){fig-pos='H'}\n:::\n:::\n\n\n\nnous pouvons d√©finir la limite des axes de 0 √† 100 comme il s'agit des pourcentages. Nous pouvons le faire en `scale_x_continuous` et `scale_y_continuous` avec l'argument `limits`. Comme le premier argument des scales est le titre, nous pouvons modifier par la m√™me occasion les titres des axes.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(rp) + \n  geom_point(aes(x = dipl_sup, y = ouvr)) + \n  scale_x_continuous(\"Pourcentage des dipl√¥m√©s du sup√©rieur\", limits = c(0, 100)) + \n  scale_y_continuous(\"Pourcentage des ouvriers\", limits = c(0, 100))\n```\n\n::: {.cell-output-display}\n![](visualisation-ggplot2_files/figure-pdf/unnamed-chunk-40-1.pdf){fig-pos='H'}\n:::\n:::\n\n\n\nPour passer √† l'√©chelle logarithmique, nous pouvons utiliser `scale_x_log10` et `scale_y_log10` comme suit :\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(rp) + \n  geom_point(aes(x = dipl_sup, y = ouvr)) + \n  scale_x_log10() + \n  scale_y_log10()\n```\n\n::: {.cell-output-display}\n![](visualisation-ggplot2_files/figure-pdf/unnamed-chunk-41-1.pdf){fig-pos='H'}\n:::\n:::\n\n\n\n### `scale_color` et `scale_fill`\n\nCes scales permettent, notamment, de modifier les palettes de couleurs servant √† colorer (`color`) ou remplir (`fill`) les √©l√©ments graphiques. Dans la suite, chaque fonction `scale_color` pr√©sent√©e a une √©quivalente `scale_fill` avec g√©n√©ralement les m√™mes arguments.\n\n-   **Variable qualitative**\n\nNous avons trac√© ce graphique pr√©c√©demment. Supposons que nous voulons modifier les diff√©rentes couleurs de remplissage des barres.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(data = rp) + \n    geom_bar(aes(x = departement, fill = departement), show.legend = F)\n```\n\n::: {.cell-output-display}\n![](visualisation-ggplot2_files/figure-pdf/unnamed-chunk-42-1.pdf){fig-pos='H'}\n:::\n:::\n\n\n\nComme nous avons utilis√© l'argument `fill` pour remplir les barres, nous pouvons utiliser `scale_fill_brewer()` pour modifier ces couleurs comme suit :\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(data = rp) + \n  geom_bar(aes(x = departement, fill = departement), show.legend = F) + \n  scale_fill_brewer()\n```\n\n::: {.cell-output-display}\n![](visualisation-ggplot2_files/figure-pdf/unnamed-chunk-43-1.pdf){fig-pos='H'}\n:::\n:::\n\n\n\nDiff√©rentes palettes existe et contenues dans le package `RColorBrewer`. La commande suivante permet de les afficher.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nRColorBrewer::display.brewer.all()\n```\n\n::: {.cell-output-display}\n![](visualisation-ggplot2_files/figure-pdf/unnamed-chunk-44-1.pdf){fig-pos='H'}\n:::\n:::\n\n\n\nLa commande suivante utilise la palette \"BrBG\"\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(data = rp) + \n  geom_bar(aes(x = departement, fill = departement), show.legend = F) + \n  scale_fill_brewer(palette = \"BrBG\")\n```\n\n::: {.cell-output-display}\n![](visualisation-ggplot2_files/figure-pdf/unnamed-chunk-45-1.pdf){fig-pos='H'}\n:::\n:::\n\n\n\nLa commande suivante utilise la palette \"Spectral\" avec un nuage des points\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(rp) + \n  geom_point(aes(x = dipl_sup, y = ouvr, color = departement)) + \n  scale_color_brewer(\"D√©partement\", palette = \"Spectral\")\n```\n\n::: {.cell-output-display}\n![](visualisation-ggplot2_files/figure-pdf/unnamed-chunk-46-1.pdf){fig-pos='H'}\n:::\n:::\n\n\n\n-   **Variable quantitative**\n\nLe graphique suivant montre le nuage des points du pourcentage des dipl√¥m√©s sup√©rieurs versus pourcentages des ouvrier dans chaque commune, en colorant les points par la part des femmes.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(rp) + \n  geom_point(aes(x = dipl_sup, y = ouvr, color = femmes))\n```\n\n::: {.cell-output-display}\n![](visualisation-ggplot2_files/figure-pdf/unnamed-chunk-47-1.pdf){fig-pos='H'}\n:::\n:::\n\n\n\nNous pouvons utiliser la fonction `scale_color_gradient()` pour modifier les couleurs avec les arguments `low` (couleur correspondant √† la valeur la plus faible) et `high` (couleur correspondant √† la valeur la plus √©lev√©e).\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(rp) + \n  geom_point(aes(x = dipl_sup, y = ouvr, color = femmes)) + \n  scale_color_gradient(\"Part des femmes\", low = \"white\", high = \"red\")\n```\n\n::: {.cell-output-display}\n![](visualisation-ggplot2_files/figure-pdf/unnamed-chunk-48-1.pdf){fig-pos='H'}\n:::\n:::\n\n\n\nIci nous avons indiqu√© que la valeur la plus faible soit blanche et la plus √©lev√©e rouge.\n\nNous pouvons √©galement utiliser les palettes de `viridis`, avec ses trois option : inferno, plasma et magma. Le graphique suivant utilise l'option \"plasma\".\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(rp) + \n  geom_point(aes(x = dipl_sup, y = ouvr, color = femmes)) + \n  scale_color_viridis_c(option = \"plasma\")\n```\n\n::: {.cell-output-display}\n![](visualisation-ggplot2_files/figure-pdf/unnamed-chunk-49-1.pdf){fig-pos='H'}\n:::\n:::\n\n\n\nüëâ Q: Refaire le graphique pr√©c√©dent avec les deux autres options (inferno et magma)\n\n## Th√®mes\n\nAvec `ggplot2`, nous utilisons les th√®mes pour modifier les √©l√©ments du graphique qui ne sont pas li√©s aux donn√©es. Il s'agit par exemple des titres du graphique et des axes, les grilles ou l'aspect global.\n\nVoyons comment nous pouvons modifier diff√©rents √©l√©ments de ce graphique.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(rp) + \n  geom_point(aes(x = dipl_sup, y = ouvr, color = departement)) + \n  labs(title = \"Distribution de la part des dipl√¥m√©s sup√©rieurs et des ouvriers\\n par d√©partement\" , \n       x = \"Part des dipl√¥m√©s sup√©rieurs\",\n       y = \"Part des ouvriers\") \n```\n\n::: {.cell-output-display}\n![](visualisation-ggplot2_files/figure-pdf/unnamed-chunk-50-1.pdf){fig-pos='H'}\n:::\n:::\n\n\n\nDans ce qui suit, nous avons :\n\n-   modifi√© le titre du graphique avec `plot.title`,\n\n-   supprim√© les grilles secondaires avec `panel.grid.minor`et `element_blank`,\n\n-   modifi√© les titres des axes avec `axis.title.x` et `axis.title.y`. Il est aussi possible d'utiliser `axis.title` pour modifier les axes ensemble.\n\n-   modifi√© les textes des axes avec `axis.text`,\n\n-   modifi√© le texte de la legende avec `legend.text`,\n\n-   chang√© la position de la l√©gende avec `legend.position`\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(rp) + \n  geom_point(aes(x = dipl_sup, y = ouvr, color = departement)) + \n  labs(title = \"Distribution de la part des dipl√¥m√©s sup√©rieurs et\\n des ouvriers par d√©partement\" , \n       x = \"Part des dipl√¥m√©s sup√©rieurs\",\n       y = \"Part des ouvriers\") +\n  theme(\n    plot.title = element_text(size = 15, color = \"darkblue\"),\n    panel.grid.minor = element_blank(),\n    axis.title.x = element_text(size = 15), \n    axis.title.y = element_text(size = 15),\n    axis.text = element_text(size = 10),\n    legend.text = element_text(size = 10),\n    legend.position = \"bottom\"\n  )\n```\n\n::: {.cell-output-display}\n![](visualisation-ggplot2_files/figure-pdf/unnamed-chunk-51-1.pdf){fig-pos='H'}\n:::\n:::\n\n\n\nIl arrive parfois que les textes des modalit√©s se superpose lorsque la variable compte plusieurs modalit√©s. Dans ce cas, vous pouvez incliner ces textes pour qu'i'ils soient visibles.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(data = rp) + \n  geom_bar(aes(x = departement, fill = departement), show.legend = F) +\n  theme(\n    axis.text.x = element_text(size = 15)\n  )\n```\n\n::: {.cell-output-display}\n![](visualisation-ggplot2_files/figure-pdf/unnamed-chunk-52-1.pdf){fig-pos='H'}\n:::\n:::\n\n\n\nVous pouvez utiliser l'argument `angle` o√π la valeur fournie correspond au degr√© d'inclinaison, 45 degr√©s ici. `hjust` permet de faire des ajustements √† l'horizontal. Souvent, il faut √©ssayer diff√©rentes valeurs obtenir un r√©sultat d√©sireux.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(data = rp) + \n  geom_bar(aes(x = departement, fill = departement), show.legend = F) +\n  theme(\n    axis.text.x = element_text(size = 15, angle = 45, hjust = 1)\n  )\n```\n\n::: {.cell-output-display}\n![](visualisation-ggplot2_files/figure-pdf/unnamed-chunk-53-1.pdf){fig-pos='H'}\n:::\n:::\n\n\n\n### Les th√®mes pr√©d√©finis de ggplot2\n\n`ggplot2` dispose d'un certain nombre de th√®mes pr√©d√©finis. Ceux-ci sont disponible via la fonction `theme_<type>`. Il suffit simplement de taper `theme_` sur la console pour que `ggplot2` vous propose les diff√©rents th√®mes.\n\nCi-apr√®s nous √©ssayons quelques-uns\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\np1 <- ggplot(rp) + \n  geom_point(aes(x = dipl_sup, y = ouvr, color = departement)) + \n  labs(title = \"Distribution de la part des dipl√¥m√©s sup√©rieurs et\\n des ouvriers par d√©partement\" , \n       x = \"Part des dipl√¥m√©s sup√©rieurs\",\n       y = \"Part des ouvriers\") \n```\n:::\n\n\n\nNous avons stock√© le graphique dans l'objet `p1`.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\np1 + \n  theme_bw()\n```\n\n::: {.cell-output-display}\n![](visualisation-ggplot2_files/figure-pdf/unnamed-chunk-55-1.pdf){fig-pos='H'}\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\np1 + \n  theme_classic()\n```\n\n::: {.cell-output-display}\n![](visualisation-ggplot2_files/figure-pdf/unnamed-chunk-56-1.pdf){fig-pos='H'}\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\np1 + \n  theme_minimal()\n```\n\n::: {.cell-output-display}\n![](visualisation-ggplot2_files/figure-pdf/unnamed-chunk-57-1.pdf){fig-pos='H'}\n:::\n:::\n\n\n\n### Les th√®mes avec ggthemes\n\nLe package `ggthemes` dispose √©galement des th√®ms qui peuvent √™tre utilis√©s pour modifier l'apparence du graphique. Ce package doit d'abord √™tre install√© si tel n'est pas encore le cas.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ninstall.packages(ggthemes)\n```\n:::\n\n\n\nEn voici quelques exemples\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\np2 <- ggplot(economics) + \n  geom_line(aes(x = date, y = psavert)) + \n  ggtitle(\"Evolution du taux d'√©pargne personnel aux \\nEtats-Unis de 1967 √† 2015\") + \n  xlab(\"Ann√©e\") + \n  ylab(\"Taux d'√©pargne personnel\")\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\np2 + \n  ggthemes::theme_economist()\n```\n\n::: {.cell-output-display}\n![](visualisation-ggplot2_files/figure-pdf/unnamed-chunk-60-1.pdf){fig-pos='H'}\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\np2 + \n  ggthemes::theme_excel()\n```\n\n::: {.cell-output-display}\n![](visualisation-ggplot2_files/figure-pdf/unnamed-chunk-61-1.pdf){fig-pos='H'}\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\np2 + \n  ggthemes::theme_fivethirtyeight()\n```\n\n::: {.cell-output-display}\n![](visualisation-ggplot2_files/figure-pdf/unnamed-chunk-62-1.pdf){fig-pos='H'}\n:::\n:::\n\n\n\n## Graphiques int√©ractifs avec plotly\n\nPlotly est un package de visualisation de donn√©es interactives en R. Il permet de cr√©er des graphiques hautement personnalisables en utilisant une syntaxe simple et intuitive. Les graphiques g√©n√©r√©s peuvent √™tre visualis√©s dans une page HTML interactive et offrent des fonctionnalit√©s telles que le zoom, le pan, l'animation et le survol des donn√©es.\n\nIci, nous ne verrons pas la syntaxe de `plotly`, mais allons plut√¥t voir comment transformer les graphiques `ggplot2` en graphiques `plotly` (interactifs). Pour ce faire, il suffit de passer √† la fonction `ggplotly()` de `plotly` le nom de l'objet contenant le graphique.\n\nEn voici quelque exemples :\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ninstall.packages(\"plotly\")\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(plotly)\n```\n:::\n\n\n\nIl suffit de passer de passer le curseur sur ces graphiques pour voir qu'ils sont maintenant int√©ractifs.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplotly(p1)\n```\n\n::: {.cell-output-display}\n![](visualisation-ggplot2_files/figure-pdf/unnamed-chunk-65-1.pdf){fig-pos='H'}\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nggplotly(p2)\n```\n\n::: {.cell-output-display}\n![](visualisation-ggplot2_files/figure-pdf/unnamed-chunk-66-1.pdf){fig-pos='H'}\n:::\n:::\n\n\n\n## Introduction √† la cr√©ation des cartes\n\nLeaflet est un package de cartographie interactif pour R qui permet de cr√©er des cartes avec des donn√©es g√©ospatiales. Il utilise une syntaxe simple et intuitive pour ajouter des marqueurs, des cercles, des polygones et des tuiles de fond de carte personnalis√©es. Les cartes g√©n√©r√©es peuvent √™tre interactives et offrent des fonctionnalit√©s telles que le zoom, le pan, le survol et le clic sur les donn√©es.\n\nPour cette introduction, nous allons comment afficher des points correspondant aux coordonn√©es g√©ographiques.\n\nUne fois le package charg√©, la commande suivante permet d'afficher une carte.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(leaflet)\n\nleaflet() %>% \n  addTiles()\n```\n\n::: {.cell-output-display}\n![](visualisation-ggplot2_files/figure-pdf/unnamed-chunk-67-1.pdf){fig-pos='H'}\n:::\n:::\n\n\n\nPour ajouter points √† notre carte, nous devons disposer des coordonn√©es g√©ographiques. Le code suivant permet de cr√©er un tableau de donn√©es contenant 100 des coordonn√©es (al√©atoires) g√©ographiques autour de la ville de Kinshasa.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# position de Kinshasa\nkinshasa <- c(-4.3217054, 15.3125973)\n\n# g√©n√©ration de 100 coordonn√©es al√©atoires autour de Kinshasa\nrand_points <- data.frame(lon = kinshasa[2] + runif(100, -0.05, 0.05),\n                           lat = kinshasa[1] + runif(100, -0.1, 0.1))\n\n# affichage des 6 premi√®res coordonn√©es\nhead(rand_points)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n       lon       lat\n1 15.33464 -4.231739\n2 15.32814 -4.420560\n3 15.31486 -4.269861\n4 15.32563 -4.351665\n5 15.31429 -4.344949\n6 15.32030 -4.320461\n```\n:::\n:::\n\n\n\nNous cr√©ons une carte centr√©e sur la ville de kinshasa, en effectuant un zoom √† l'aide de la fonction `setView()`. Les points sont ajout√©s avec la fonctions `addMarkers()`.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# chargement de la biblioth√®que\nlibrary(leaflet)\n\n# cr√©ation de la carte centr√©e sur Kinshasa\nkinshasa_map <- leaflet() %>%\n  setView(lng = 15.3125973, lat = -4.3217054, zoom = 11)\n\n# ajout des coordonn√©es al√©atoires et affichage de la carte interactive\nkinshasa_map %>%\n  addTiles() %>%\n  addMarkers(data = rand_points, ~lon, ~lat) \n```\n\n::: {.cell-output-display}\n![](visualisation-ggplot2_files/figure-pdf/unnamed-chunk-69-1.pdf){fig-pos='H'}\n:::\n:::\n",
    "supporting": [
      "visualisation-ggplot2_files\\figure-pdf"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {
      "knitr": [
        "{\"type\":\"list\",\"attributes\":{},\"value\":[]}"
      ]
    },
    "preserve": null,
    "postProcess": false
  }
}