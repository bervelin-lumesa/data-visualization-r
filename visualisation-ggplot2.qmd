# Visualisation de donn√©es avec ggplot2

`ggplot2` est un package populaire de visualisation de donn√©es. Il se base sur la grammaire des graphiques et offre des fonctionnalit√©s puissantes pour cr√©er des graphiques professionnels et personnalis√©s.

Dans ce chapitre, nous examinerons les principales fonctions de `ggplot2` et comment elles peuvent √™tre appliqu√©es pour cr√©er diff√©rents types de graphiques, tels que les diagrammes en barres, les histogrammes, les diagrammes de dispersion et bien d'autres. Nous expliquerons √©galement comment ajuster l'apparence de vos graphiques pour les adapter aux besoins de votre projet.

Faisant partie du package `tidyverse`, `ggplot2` peut √™tre charg√© automatiquement avec la commande suivante :

```{r warning=FALSE, message=FALSE}
library(tidyverse)
```

Ou explicitement avec la commande suivante :

```{r eval=FALSE}
library(ggplot2)
```

Nous recommandons la premi√®re possibilit√© car nous aurons √† utiliser un op√©rateur `%>%`, le pipe qui permet d'encha√Æner des commandes.

Les donn√©es qui seront utilis√©es ici sont tir√©es du recensement de la population de 2018 contenues dans le package `questionr`(r√©sultats partiels concernant les communes de plus de 2000 habitants de France m√©tropolitaine).

Dans ce qui suit, nous limitons l'analyse √† 4 d√©partements √† l'aide de la fonction `filter()` du package `dplyr`.

```{r message=FALSE, warning=FALSE}
library(questionr)
data(rp2018)

rp <- filter(
  rp2018,
  departement %in% c("Oise", "Rh√¥ne", "Hauts-de-Seine", "Bouches-du-Rh√¥ne")
)
```

## Structrure d'un graphique `ggplot2`

Les graphiques `ggplot2` sont construits en superposant diff√©rentes couches (layers) les unes apr√®s les autres.

```{r eval=FALSE}
ggplot(data = DATASET) + 
	geom_PLOT_TYPE(mapping = aes(VARIABLE)) 
```

On commence par identifier le jeu de donn√©es √† utiliser dans la fonction `ggplot()`. Ensuite le type de graphique √† r√©aliser est ajout√© avec `geom_*` et les variables √† repr√©senter. D'autres couches, par exemple les titres des axes, le th√®me et autres. Notez que l'ajout des couches se fait √† l'aide du l'op√©rateur `+`.

On peut par exemple tracer un diagramme √† barres √† l'aide de la commande suivante :

```{r}
ggplot(data = rp) + 
  geom_bar(aes(x = departement))
```

Notez bien que la variable est fournie √† l'int√©rieur de `aes()` ou `aesthetic`.

## Types de geom

`ggplot` dispose d'un grand nombre de `geom` permettant de tracer une vari√©t√© de graphiques. Ci-d√©ssous, nous allons voir quelques `geom` les plus utilis√©s.

### geom_histogram

`geom_histogram()` permet de repr√©senter une variable quantitative continue. On lui fournit la variable que l'on souhaite repr√©sente en `x`. Le rendu du graphique correspond aux barres contigu√Øes. La hauteur de chaque barre est fonction du nombre d'observations se trouvant dans un intervalle donn√©.

```{r}
ggplot(rp) + 
  geom_histogram(aes(x = cadres))
```

On peut ajouter `bins` pour contr√¥ler le nombre d'intervalles ou `binwidth` pour la longueur de chaque intervalle. L'argument `fill` permet de modifier la couleur.

```{r}
ggplot(rp) + 
  geom_histogram(aes(x = cadres), bins = 15, fill = "cornflowerblue")
```

`geom_freqpoly()` fonctionne de la m√™me mani√®re que `geom_histogram()`, sauf qu'au lieu des barres, il trace des lignes. Il est tr√®s utilie pour comparer diff√©rents groupes.

üëâ Q: Tracer un histogramme avec la variable `ouvr`

### geom_density

Le graphique de densit√© (aussi connu sous le nom de diagramme de densit√© de probabilit√©) est un type de graphique qui affiche la distribution des donn√©es continues. Il est utilis√© pour visualiser la forme d'une distribution de donn√©es.

```{r}
ggplot(rp) + 
  geom_density(aes(x = cadres))
```

### geom_boxplot

Permet de repr√©senter des bo√Ætes √† moustaches. Avec une variable quantitative, ce graphique aide √† √©tudier la distribution de la variable avec 5 indicateurs (minimum, premier quartile, m√©diane, troisi√®me quartile et le maximum), permettant ainsi la d√©tection des valeurs aberrantes (outliers).

```{r}
ggplot(rp) + 
  geom_boxplot(aes(x = cadres)) 
```

Utilis√© avec une variable qualitative (en `x`) et quantitative (en `y`), le boxplot permet de comparer plusieurs distributions.

Nous pouvons ajouter les arguments `fill` et `color` pour modifier la couleur des bo√Ætes et celle des bordures.

```{r}
ggplot(rp) + 
  geom_boxplot(aes(x = region, y = cadres), fill = "wheat", color = "darkred") +
  coord_flip()
```

La fonction `coord_flip()` a √©t√© ajout√©e pour pivoter le graphique.

L'argument `varwidth` permet de faire varier la largeur des bo√Ætes en fonction des effectifs de chaque cat√©gorie.

üëâ Q: Ajouter l'argument `varwidth = TRUE` et observer la diff√©rence avec le graphique pr√©c√©dent.

```{r eval=FALSE, include=FALSE}
ggplot(rp) + 
  geom_boxplot(aes(x = region, y = cadres), fill = "wheat", color = "darkred", varwidth = T) 
```

### geom_bar/geom_col

`geom_bar()` permet de tracer un diagramme en barres. Il prend comme argument la variable cat√©gorielle dont on souhaite connaitre la fr√©quence de chaque modalit√©.

La commande suivante permet de tracer un diagramme en barres pour connaitre le nombre de communes dans chaque region.

```{r}
ggplot(rp) +
  geom_bar(aes(x = region))
```

`geom_col()` quant √† lui demande deux arguments : la variable cat√©gorielle et les effectifs ou pourcentages correspondants.

Il est possible de contr√¥le la largeur des barres avec `width`.

L'exemple ci-apr√®s montre comment produire le m√™me graphique que pr√©c√©dent mais avec `geom_col()`.

One calcule d'abord des proportions et on produit le graphique ensuite. `geom_col()`

```{r}
plt1 <- rp %>% 
  group_by(region) %>% 
  summarise(n = n()) %>% 
  mutate(pct = round(n / sum(n), 2))
```

```{r}
plt1 %>% 
  ggplot() + 
  geom_col(aes(x = region, y = pct)) 
```

### geom_point

`geom_point()` permet de tracer un nuage de points ou diagramme de dispersion. Il prend comme arguments en `x` et `y` les variables dont on veut √©tudier la relation.

Le graphique nous montre sur un nuage de points les pourcentages des cadres et ceux des dipl√¥m√©s du sup√©rieur.

```{r}
ggplot(rp) + 
  geom_point(aes(x = dipl_sup, y = ouvr))
```

La taille des points peut √™tre g√©r√©e avec l'argument `size`, la couleur avec `color`, et la transparence avec `alpha` dont la valeur varie de 0 √† 1. Remarquez que ces arguments sont pass√©s √† l'ext√©rieur de la fonction `aes()` comme suit :

```{r}
ggplot(rp) + 
  geom_point(aes(x = dipl_sup, y = ouvr), size = 3, color = "darkgreen", alpha = 0.5)
```

üëâ Q: Remplacer `ouvr` par `cadres` et comparer la forme de des deux graphiques

### geom_text

`geom_text()` permet d'afficher des √©tiquettes de texte. On lui fournit, dans `aes()` deux variables quantitatives (`x` et `y`) pour d√©finir la position des √©tiquettes et `label` pour la variable qui contient les √©tiquettes √† afficher.

Nous repr√©nons le graphique pr√©c√©dent en rempla√ßant les poits pour les noms de communes.

```{r}
ggplot(rp) + 
  geom_text(aes(x = dipl_sup, y = ouvr, label = commune))
```

`geom_label()` est similaire √† `geom_text()`, mais avec un rendu un peu diff√©rent.

```{r eval=FALSE}
ggplot(rp) + 
  geom_label(aes(x = dipl_sup, y = ouvr, label = commune))
```

### geom_line

`geom_line()` permet de tracer des lignes reliant diff√©rentes observations entre elles. On lui fournit en `x` la variable du temps et en `y` la variable dont on veut voir l'√©volution. Ce graphique est souvent utilis√© pour repr√©senter des s√©ries temporelles.

On va utiliser les donn√©es contenues dans le package `ggplot2` pour repr√©senter l'√©volution du taux d'√©pargne personnel (`psavert`) aux Etats-Unis dans le temps (`date`).

Les fonctions `ggtitle()`, `xlab()` et `ylab()` permettent respectivement de modifier le titre du graphique, le titre de l'axe des `x` et celui de l'axe des `y`. Une autre mani√®re plus simple est d'utiliser la fonctions `labs()` avec comme arguments `title`, `x` et `y`.

```{r}
data("economics")
head(economics)

ggplot(economics) + 
  geom_line(aes(x = date, y = psavert)) + 
  ggtitle("Evolution du taux d'√©pargne personnel aux \nEtats-Unis de 1967 √† 2015") + 
  xlab("Ann√©e") + 
  ylab("Taux d'√©pargne personnel")
```

## Visualiser les corr√©lations


## Mappages

Dans le jargon de `ggplot2`, un mappage consiste √† mettre en relation un attribut graphique du `geom` (couleur, position, taille, etc) avec une variable. Les arguments du mappages doivent √™tre pass√©s √† l'int√©rieur de `aes()`.

### Exemple

Quand vous avez utilis√© la commande suivante,

```{r}
ggplot(rp) + 
  geom_point(aes(x = dipl_sup, y = ouvr))
```

vous avez indiqu√© √† `ggplot2` de faire varier la position de chaque point en fonction des valeurs de `x` et `y`. Au d√©l√† de √ßa, vous pouvez faire varier la couleur des points en fonction par exemple des d√©partements comme suit :

```{r fig.width=7}
ggplot(rp) + 
  geom_point(aes(x = dipl_sup, y = ouvr, color = departement))
```

Vous pouvez aussi ajouter une autre variable pour faire varier les points en fonctions du taux de ch√¥mage.

```{r fig.width=7}
ggplot(rp) + 
  geom_point(aes(x = dipl_sup, y = ouvr, color = departement, size = chom), alpha = 0.5)
```

### A l'int√©rieur de `aes()`ou non ?

Lorsque nous voulons modifier un attribut du graphique, par exemple la taille des points pour un diagramme de dispersion, sans relier cette variation avec une variable, nous pr√©cisons cela en l'ext√©rieur de `aes()`.

```{r}
ggplot(rp) +
  geom_point(aes(x = dipl_sup, y = cadres), size = 3)
```

Mais lorsque nous souhaitons faire varier la taille de diff√©rens points en fonction des valeurs d'une autre variable, la nous pr√©cisons l'argument √† l'int√©rieur de la fonction `aes()` et pr√©cisons le nom de la variable concern√©e comme suit :

```{r}
ggplot(rp) +
  geom_point(aes(x = dipl_sup, y = cadres, size = pop_tot))
```

Vous pouvez par exemple faire varier les couleurs des barres comme suit :

`show.legend = F` permet de ne pas afficher la legende qui est sans importance ici.

```{r}
ggplot(data = rp) + 
  geom_bar(aes(x = departement, fill = departement), show.legend = F) 
```

### Mappage avec geom_bar

Pour r√©aliser le mappage avec `geom_bar()`, nous allons utiliser l'argument `fill` avec une variable qualitative. Cela permet de tracer des barres de couleur diff√©rentes selon les modalit√©s d'une deuxi√®me variable :

```{r}
ggplot(rp) +
  geom_bar(aes(x = region, fill = pop_cl))
```

La position des barres peut √™tre g√©r√©e avec l'argument `position` au sein de `geom_bar()`. `position` peut avoir comme valeurs :

-   "stack" : option par d√©faut, permet d'avoir des barres emplil√©es,

-   "dodge" : permet d'avoir des barres c√¥te √† c√¥te,

-   "fill" : permet d'avoir des proportions au lieu des effectifs.

Le graphique suiant donne des barres c√¥te √† c√¥te

```{r}
ggplot(rp) +
  geom_bar(aes(x = region, fill = pop_cl), position = "dodge")
```

Avec `fill` comme valeur, nous obtenons des proportions

```{r}
ggplot(rp) +
  geom_bar(aes(x = region, fill = pop_cl), position = "fill")
```

## Plusieurs sources de donn√©es

Il est possible d'utiliser diff√©rentes sources de donn√©es sur diff√©rents geoms. Le code suivant permet de tracer un nuage de points avec les noms de communes de plus de 80000 habitants. La solution consiste √† d'abord cr√©er une base ne contenant que ces communes gr√¢ce √† la fonction `filter()`. Ensuite, on trace le nuage des points pour le tableau de donn√©es de d√©part, pour enfin ajouter les libell√©s avec `geom_text()` en pr√©cisant le tableau de donn√©es filtr√©es.

```{r}
com80 <- filter(rp, pop_tot > 80000)
```

```{r}
ggplot(data = rp, aes(x = dipl_sup, y = cadres)) +
geom_point(alpha = 0.2) +
geom_text(
data = com80, aes(label = commune),
color = "red", size = 3
)
```

## Faceting

Permet de tracer un m√™me graphique plusieurs fois en fonctions d'une ou plusieurs variables qualitatives. Nous avons pour cela deux fonctions :

-   `facet_wrap()` : dispose les graphique automatiquement

-   `facet_grid()` : dispose les graphique en ligne (`rows`) ou en colonne (`cols`)

Consid√©rons le nuage des points pr√©c√©dent.

```{r}
ggplot(data = rp, aes(x = dipl_sup, y = cadres)) +
  geom_point(alpha = 0.2)
```

Si nous voulons comparer ce graphique entre les diff√©rentes regions, nous pouvons utiliser ces deux fonctions comme suit :

```{r}
ggplot(data = rp, aes(x = dipl_sup, y = cadres)) +
  geom_point(alpha = 0.2) + 
  facet_grid(cols = vars(region))
```

L'argument scale peut √™tre ajout√© pour lib√©rer l'axe des x (`"free_x"`), l'axe des y (`"free_y"`) ou les deux (`"free"`).

```{r}
ggplot(data = rp, aes(x = dipl_sup, y = cadres)) +
  geom_point(alpha = 0.2) + 
  facet_wrap(vars(region), scales = "free")
```

üëâ Q: Ajouter la variable `pop_cl` dans la fonction `facet_grid()` pr√©c√©dente comme suit `cols = vars(region), rows = vars(pop_cl)`.

```{r eval=FALSE, include=FALSE}
ggplot(data = rp, aes(x = dipl_sup, y = cadres)) +
  geom_point(alpha = 0.2) + 
  facet_grid(cols = vars(region), rows = vars(pop_cl), scales = "free")
```

## Scales

Il est possible de d√©finir des mappages entre des attributs graphiques (tels que la position, la taille, la couleur, etc.) et des variables d'un tableau de donn√©es avec `ggplot2.` La fonction `aes()` est utilis√©e pour chaque geom afin de d√©finir ces mappages. Dans `ggplot2`, les scales permettent de modifier la mani√®re dont un attribut du graphique est li√© aux valeurs d'une variable et comment la l√©gende correspondante est affich√©e. Par exemple, la palette de couleurs utilis√©e peut √™tre d√©finie pour l'attribut `color` et les tailles minimales et maximales peuvent √™tre d√©finies pour `size`.

Pour modifier une scale existante, on utilise l'op√©rateur + et on ajoute un nouvel √©l√©ment √† l'objet ggplot2 qui prend la forme `scale_<attribut>_<type>`.

### scale_size

Lorsque nous effectuons un mappage de type `size`, nous pouvons modifier les tailles minimales et maximales des objets en utilisant la fonction `scale_size`. L'argument `range` est utilis√© pour cela.

```{r}
ggplot(rp) +
geom_point(aes(x = dipl_sup, y = cadres, size = pop_tot), alpha = 0.6) +
scale_size("Population", range = c(0, 20))
```

Pour tous les scales, le premier argument est toujours le titre.

D'autres arguments peut √™tre ajout√©s comme suit :

```{r}
ggplot(rp) +
  geom_point(aes(x = dipl_sup, y = cadres, size = pop_tot)) +
  scale_size(
    "Population",
    range = c(0, 15),
    breaks = c(1000, 5000, 10000, 50000),
    labels = c("<1000", "1000-5000", "5000-9999", "10000-50000")
)
```



### Les scales des axes (scale_x, scale_y)

Pour modifier les axes du graphique, nous allons utiliser les scales `scale_x_<type>` et `scale_y_<type>` o√π `<type>` sera remplac√© par `discrete` ou `continuous` si la variable est respectivement qualitative ou quantitative.

-   `scale_x_discrete` et `scale_y_discrete`

Avec un diagramme en barres par exemple, nous pouvons exclure certaines modalit√© du graphique ou modifier le titre d'un axe.

```{r}
ggplot(rp) +
  geom_bar(aes(x = region))
```

Enlevons par exemple la region de l'√Æle de France.

```{r}
ggplot(rp) +
  geom_bar(aes(x = region)) + 
  scale_x_discrete("Region", limits = c("Provence-Alpes-C√¥te d'Azur", "Hauts-de-France", "Auvergne-Rh√¥ne-Alpes"))
```

-   `scale_x_continuous` et `scale_y_continuous`

Partant de ce graphique,

```{r}
ggplot(rp) + 
  geom_point(aes(x = dipl_sup, y = ouvr)) 
```

nous pouvons d√©finir la limite des axes de 0 √† 100 comme il s'agit des pourcentages. Nous pouvons le faire en `scale_x_continuous` et `scale_y_continuous` avec l'argument `limits`. Comme le premier argument des scales est le titre, nous pouvons modifier par la m√™me occasion les titres des axes.

```{r}
ggplot(rp) + 
  geom_point(aes(x = dipl_sup, y = ouvr)) + 
  scale_x_continuous("Pourcentage des dipl√¥m√©s du sup√©rieur", limits = c(0, 100)) + 
  scale_y_continuous("Pourcentage des ouvriers", limits = c(0, 100))
```

Pour passer √† l'√©chelle logarithmique, nous pouvons utiliser `scale_x_log10` et `scale_y_log10` comme suit :

```{r}
ggplot(rp) + 
  geom_point(aes(x = dipl_sup, y = ouvr)) + 
  scale_x_log10() + 
  scale_y_log10()
```

### `scale_color` et `scale_fill`

Ces scales permettent, notamment, de modifier les palettes de couleurs servant √† colorer (`color`) ou remplir (`fill`) les √©l√©ments graphiques. Dans la suite, chaque fonction `scale_color` pr√©sent√©e a une √©quivalente `scale_fill` avec g√©n√©ralement les m√™mes arguments.

-   **Variable qualitative**

Nous avons trac√© ce graphique pr√©c√©demment. Supposons que nous voulons modifier les diff√©rentes couleurs de remplissage des barres.

```{r}
ggplot(data = rp) + 
    geom_bar(aes(x = departement, fill = departement), show.legend = F)
```

Comme nous avons utilis√© l'argument `fill` pour remplir les barres, nous pouvons utiliser `scale_fill_brewer()` pour modifier ces couleurs comme suit :

```{r}
ggplot(data = rp) + 
  geom_bar(aes(x = departement, fill = departement), show.legend = F) + 
  scale_fill_brewer()
```

Diff√©rentes palettes existe et contenues dans le package `RColorBrewer`. La commande suivante permet de les afficher.

```{r}
RColorBrewer::display.brewer.all()
```

La commande suivante utilise la palette "BrBG"

```{r}
ggplot(data = rp) + 
  geom_bar(aes(x = departement, fill = departement), show.legend = F) + 
  scale_fill_brewer(palette = "BrBG")
```

La commande suivante utilise la palette "Spectral" avec un nuage des points

```{r}
ggplot(rp) + 
  geom_point(aes(x = dipl_sup, y = ouvr, color = departement)) + 
  scale_color_brewer("D√©partement", palette = "Spectral")
```

-   **Variable quantitative**

Le graphique suivant montre le nuage des points du pourcentage des dipl√¥m√©s sup√©rieurs versus pourcentages des ouvrier dans chaque commune, en colorant les points par la part des femmes.

```{r}
ggplot(rp) + 
  geom_point(aes(x = dipl_sup, y = ouvr, color = femmes))
```

Nous pouvons utiliser la fonction `scale_color_gradient()` pour modifier les couleurs avec les arguments `low` (couleur correspondant √† la valeur la plus faible) et `high` (couleur correspondant √† la valeur la plus √©lev√©e).

```{r}
ggplot(rp) + 
  geom_point(aes(x = dipl_sup, y = ouvr, color = femmes)) + 
  scale_color_gradient("Part des femmes", low = "white", high = "red")
```

Ici nous avons indiqu√© que la valeur la plus faible soit blanche et la plus √©lev√©e rouge.

Nous pouvons √©galement utiliser les palettes de `viridis`, avec ses trois option : inferno, plasma et magma. Le graphique suivant utilise l'option "plasma".

```{r}
ggplot(rp) + 
  geom_point(aes(x = dipl_sup, y = ouvr, color = femmes)) + 
  scale_color_viridis_c(option = "plasma")
```

üëâ Q: Refaire le graphique pr√©c√©dent avec les deux autres options (inferno et magma)

## Th√®mes

Avec `ggplot2`, nous utilisons les th√®mes pour modifier les √©l√©ments du graphique qui ne sont pas li√©s aux donn√©es. Il s'agit par exemple des titres du graphique et des axes, les grilles ou l'aspect global.

Voyons comment nous pouvons modifier diff√©rents √©l√©ments de ce graphique.

```{r}
ggplot(rp) + 
  geom_point(aes(x = dipl_sup, y = ouvr, color = departement)) + 
  labs(title = "Distribution de la part des dipl√¥m√©s sup√©rieurs et des ouvriers\n par d√©partement" , 
       x = "Part des dipl√¥m√©s sup√©rieurs",
       y = "Part des ouvriers") 
```

Dans ce qui suit, nous avons :

-   modifi√© le titre du graphique avec `plot.title`,

-   supprim√© les grilles secondaires avec `panel.grid.minor`et `element_blank`,

-   modifi√© les titres des axes avec `axis.title.x` et `axis.title.y`. Il est aussi possible d'utiliser `axis.title` pour modifier les axes ensemble.

-   modifi√© les textes des axes avec `axis.text`,

-   modifi√© le texte de la legende avec `legend.text`,

-   chang√© la position de la l√©gende avec `legend.position`

```{r fig.height=6}
ggplot(rp) + 
  geom_point(aes(x = dipl_sup, y = ouvr, color = departement)) + 
  labs(title = "Distribution de la part des dipl√¥m√©s sup√©rieurs et\n des ouvriers par d√©partement" , 
       x = "Part des dipl√¥m√©s sup√©rieurs",
       y = "Part des ouvriers") +
  theme(
    plot.title = element_text(size = 15, color = "darkblue"),
    panel.grid.minor = element_blank(),
    axis.title.x = element_text(size = 15), 
    axis.title.y = element_text(size = 15),
    axis.text = element_text(size = 10),
    legend.text = element_text(size = 10),
    legend.position = "bottom"
  )
```

Il arrive parfois que les textes des modalit√©s se superpose lorsque la variable compte plusieurs modalit√©s. Dans ce cas, vous pouvez incliner ces textes pour qu'i'ils soient visibles.

```{r}
ggplot(data = rp) + 
  geom_bar(aes(x = departement, fill = departement), show.legend = F) +
  theme(
    axis.text.x = element_text(size = 15)
  )
```

Vous pouvez utiliser l'argument `angle` o√π la valeur fournie correspond au degr√© d'inclinaison, 45 degr√©s ici. `hjust` permet de faire des ajustements √† l'horizontal. Souvent, il faut √©ssayer diff√©rentes valeurs obtenir un r√©sultat d√©sireux.

```{r}
ggplot(data = rp) + 
  geom_bar(aes(x = departement, fill = departement), show.legend = F) +
  theme(
    axis.text.x = element_text(size = 15, angle = 45, hjust = 1)
  )
```

### Les th√®mes pr√©d√©finis de ggplot2

`ggplot2` dispose d'un certain nombre de th√®mes pr√©d√©finis. Ceux-ci sont disponible via la fonction `theme_<type>`. Il suffit simplement de taper `theme_` sur la console pour que `ggplot2` vous propose les diff√©rents th√®mes.

Ci-apr√®s nous √©ssayons quelques-uns

```{r}
p1 <- ggplot(rp) + 
  geom_point(aes(x = dipl_sup, y = ouvr, color = departement)) + 
  labs(title = "Distribution de la part des dipl√¥m√©s sup√©rieurs et\n des ouvriers par d√©partement" , 
       x = "Part des dipl√¥m√©s sup√©rieurs",
       y = "Part des ouvriers") 
```

Nous avons stock√© le graphique dans l'objet `p1`.

```{r}
p1 + 
  theme_bw()
```

```{r}
p1 + 
  theme_classic()
```

```{r}
p1 + 
  theme_minimal()
```

### Les th√®mes avec ggthemes

Le package `ggthemes` dispose √©galement des th√®ms qui peuvent √™tre utilis√©s pour modifier l'apparence du graphique. Ce package doit d'abord √™tre install√© si tel n'est pas encore le cas.

```{r message=FALSE, warning=FALSE, eval=FALSE}
install.packages(ggthemes)
```

En voici quelques exemples

```{r}
p2 <- ggplot(economics) + 
  geom_line(aes(x = date, y = psavert)) + 
  ggtitle("Evolution du taux d'√©pargne personnel aux \nEtats-Unis de 1967 √† 2015") + 
  xlab("Ann√©e") + 
  ylab("Taux d'√©pargne personnel")
```

```{r}
p2 + 
  ggthemes::theme_economist()
```

```{r}
p2 + 
  ggthemes::theme_excel_new()
```

```{r}
p2 + 
  ggthemes::theme_fivethirtyeight()
```


## Sauvegarder son graphique


## Graphiques int√©ractifs avec plotly

Plotly est un package de visualisation de donn√©es interactives en R. Il permet de cr√©er des graphiques hautement personnalisables en utilisant une syntaxe simple et intuitive. Les graphiques g√©n√©r√©s peuvent √™tre visualis√©s dans une page HTML interactive et offrent des fonctionnalit√©s telles que le zoom, le pan, l'animation et le survol des donn√©es.

Ici, nous ne verrons pas la syntaxe de `plotly`, mais allons plut√¥t voir comment transformer les graphiques `ggplot2` en graphiques `plotly` (interactifs). Pour ce faire, il suffit de passer √† la fonction `ggplotly()` de `plotly` le nom de l'objet contenant le graphique.

En voici quelque exemples :

```{r eval=FALSE}
install.packages("plotly")
```

```{r message=FALSE, warning=FALSE}
library(plotly)
```

Il suffit de passer de passer le curseur sur ces graphiques pour voir qu'ils sont maintenant int√©ractifs.

```{r}
ggplotly(p1)
```

```{r}
ggplotly(p2)
```

## Introduction √† la cr√©ation des cartes

Leaflet est un package de cartographie interactif pour R qui permet de cr√©er des cartes avec des donn√©es g√©ospatiales. Il utilise une syntaxe simple et intuitive pour ajouter des marqueurs, des cercles, des polygones et des tuiles de fond de carte personnalis√©es. Les cartes g√©n√©r√©es peuvent √™tre interactives et offrent des fonctionnalit√©s telles que le zoom, le pan, le survol et le clic sur les donn√©es.

Pour cette introduction, nous allons comment afficher des points correspondant aux coordonn√©es g√©ographiques.

Une fois le package charg√©, la commande suivante permet d'afficher une carte.

```{r}
library(leaflet)

leaflet() %>% 
  addTiles()
```

Pour ajouter points √† notre carte, nous devons disposer des coordonn√©es g√©ographiques. Le code suivant permet de cr√©er un tableau de donn√©es contenant 100 des coordonn√©es (al√©atoires) g√©ographiques autour de la ville de Kinshasa.

```{r}
# position de Kinshasa
kinshasa <- c(-4.3217054, 15.3125973)

# g√©n√©ration de 100 coordonn√©es al√©atoires autour de Kinshasa
rand_points <- data.frame(lon = kinshasa[2] + runif(100, -0.05, 0.05),
                           lat = kinshasa[1] + runif(100, -0.1, 0.1))

# affichage des 6 premi√®res coordonn√©es
head(rand_points)
```

Nous cr√©ons une carte centr√©e sur la ville de kinshasa, en effectuant un zoom √† l'aide de la fonction `setView()`. Les points sont ajout√©s avec la fonctions `addMarkers()`.

```{r}
# chargement de la biblioth√®que
library(leaflet)

# cr√©ation de la carte centr√©e sur Kinshasa
kinshasa_map <- leaflet() %>%
  setView(lng = 15.3125973, lat = -4.3217054, zoom = 11)

# ajout des coordonn√©es al√©atoires et affichage de la carte interactive
kinshasa_map %>%
  addTiles() %>%
  addMarkers(data = rand_points, ~lon, ~lat) 
```
